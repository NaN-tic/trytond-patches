# HG changeset patch
# User Sergi Almacellas Abellana <sergi@koolpi.com>
Add company domain


issue5104

review19141003

Index: trytond/trytond/modules/analytic_account/account.py
===================================================================

diff -r 0cd556f1c82c account.py
--- a/trytond/trytond/modules/analytic_account/account.py	Sun Mar 13 16:19:22 2016 +0100
+++ b/trytond/trytond/modules/analytic_account/account.py	Tue Apr 26 18:24:04 2016 +0200
@@ -8,7 +8,7 @@
 from trytond import backend
 from trytond.model import ModelView, ModelSQL, fields, Unique
 from trytond.wizard import Wizard, StateView, StateAction, Button
-from trytond.pyson import Eval, PYSONEncoder
+from trytond.pyson import Eval, If, PYSONEncoder, PYSONDecoder
 from trytond.transaction import Transaction
 from trytond.pool import Pool

@@ -22,7 +22,7 @@
     name = fields.Char('Name', required=True, translate=True, select=True)
     code = fields.Char('Code', select=True)
     active = fields.Boolean('Active', select=True)
-    company = fields.Many2One('company.company', 'Company')
+    company = fields.Many2One('company.company', 'Company', required=True)
     currency = fields.Many2One('currency.currency', 'Currency', required=True)
     currency_digits = fields.Function(fields.Integer('Currency Digits'),
         'on_change_with_currency_digits')
@@ -33,6 +33,7 @@
         ], 'Type', required=True)
     root = fields.Many2One('analytic_account.account', 'Root', select=True,
         domain=[
+            ('company', '=', Eval('company')),
             ('parent', '=', None),
             ('type', '=', 'root'),
             ],
@@ -40,7 +41,7 @@
             'invisible': Eval('type') == 'root',
             'required': Eval('type') != 'root',
             },
-        depends=['type'])
+        depends=['company', 'type'])
     parent = fields.Many2One('analytic_account.account', 'Parent', select=True,
         domain=[('parent', 'child_of', Eval('root'))],
         states={
@@ -311,19 +312,26 @@
     __name__ = 'analytic.account.entry'
     origin = fields.Reference('Origin', selection='get_origin', select=True)
     root = fields.Many2One('analytic_account.account', 'Root Analytic',
-        domain=[('type', '=', 'root')])
+        domain=[
+            ('company', '=', Eval('company')),
+            ('type', '=', 'root'),
+            ],
+        depends=['company'])
     account = fields.Many2One('analytic_account.account', 'Account',
         ondelete='RESTRICT',
         states={
             'required': Eval('required', False),
             },
         domain=[
+            ('company', '=', Eval('company')),
             ('root', '=', Eval('root')),
             ('type', '=', 'normal'),
             ],
-        depends=['root', 'required'])
+        depends=['root', 'required', 'company'])
     required = fields.Function(fields.Boolean('Required'),
         'on_change_with_required')
+    company = fields.Function(fields.Many2One('company.company', 'Company'),
+        'on_change_with_company', searcher='search_company')

     @classmethod
     def __register__(cls, module_name):
@@ -386,12 +394,27 @@
             return self.root.mandatory
         return False

+    @classmethod
+    def default_company(cls):
+        return Transaction().context.get('company')
+
+    def on_change_with_company(self, name=None):
+        return Transaction().context.get('company')
+
+    @classmethod
+    def search_company(cls, name, clause):
+        raise NotImplementedError()
+

 class AnalyticMixin(ModelSQL):

     analytic_accounts = fields.One2Many('analytic.account.entry', 'origin',
         'Analytic Accounts',
         size=Eval('analytic_accounts_size', 0),
+        domain=[
+            ('company', If(Eval('context', {}).contains('company'), '=', '!='),
+                Eval('context', {}).get('company', -1)),
+            ],
         depends=['analytic_accounts_size'])
     analytic_accounts_size = fields.Function(fields.Integer(
             'Analytic Accounts Size'), 'get_analytic_accounts_size')
@@ -427,13 +450,19 @@
                         where=entry.selection == selection_id))
             handler.drop_column('analytic_accounts')

-    @staticmethod
-    def default_analytic_accounts():
+    @classmethod
+    def analytic_accounts_domain(cls):
+        return PYSONDecoder(Transaction().context).decode(
+            PYSONEncoder().encode(cls.analytic_accounts.domain))
+
+    @classmethod
+    def default_analytic_accounts(cls):
         pool = Pool()
         AnalyticAccount = pool.get('analytic_account.account')

         accounts = []
-        root_accounts = AnalyticAccount.search([
+        root_accounts = AnalyticAccount.search(
+            cls.analytic_accounts_domain() + [
                 ('parent', '=', None),
                 ])
         for account in root_accounts:
@@ -443,11 +472,14 @@
                     })
         return accounts

-    @staticmethod
-    def default_analytic_accounts_size():
+    @classmethod
+    def default_analytic_accounts_size(cls):
         pool = Pool()
         AnalyticAccount = pool.get('analytic_account.account')
-        return len(AnalyticAccount.search([('type', '=', 'root')]))
+        return len(AnalyticAccount.search(
+            cls.analytic_accounts_domain() + [
+                    ('type', '=', 'root'),
+                    ]))

     @classmethod
     def get_analytic_accounts_size(cls, records, name):
@@ -464,12 +496,17 @@
         "Check that all mandatory root entries are defined in entries"
         pool = Pool()
         Account = pool.get('analytic_account.account')
-        mandatory_roots = {a for a in Account.search([
+        all_mandatory_roots = {a for a in Account.search([
                 ('type', '=', 'root'),
                 ('mandatory', '=', True),
                 ])}
         for analytic in analytics:
             analytic_roots = {e.root for e in analytic.analytic_accounts}
+            companies = {e.company for e in analytic.analytic_accounts}
+            mandatory_roots = set()
+            for mandatory in all_mandatory_roots:
+                if mandatory.company in companies:
+                    mandatory_roots.add(mandatory)
             if not mandatory_roots <= analytic_roots:
                 cls.raise_user_error('root_account', {
                         'name': analytic.rec_name,
diff -r 0cd556f1c82c line.py
--- a/trytond/trytond/modules/analytic_account/line.py	Sun Mar 13 16:19:22 2016 +0100
+++ b/trytond/trytond/modules/analytic_account/line.py	Tue Apr 26 18:24:04 2016 +0200
@@ -24,7 +24,7 @@
     currency_digits = fields.Function(fields.Integer('Currency Digits'),
         'on_change_with_currency_digits')
     company = fields.Function(fields.Many2One('company.company', 'Company'),
-        'on_change_with_company')
+        'on_change_with_company', searcher='search_company')
     account = fields.Many2One('analytic_account.account', 'Account',
         required=True, select=True, domain=[
             ('type', '!=', 'view'),
@@ -104,6 +104,10 @@
         if self.move_line:
             return self.move_line.account.company.id

+    @classmethod
+    def search_company(cls, name, clause):
+        return [('move_line.account.company',) + tuple(clause[1:])]
+
     @staticmethod
     def query_get(table):
         '''
diff -r 0cd556f1c82c line.xml
--- a/trytond/trytond/modules/analytic_account/line.xml	Sun Mar 13 16:19:22 2016 +0100
+++ b/trytond/trytond/modules/analytic_account/line.xml	Tue Apr 26 18:24:04 2016 +0200
@@ -67,5 +67,15 @@
             <field name="name">move_line_form</field>
         </record>

+        <record model="ir.rule.group" id="rule_group_account_line">
+            <field name="model" search="[('model', '=', 'analytic_account.line')]"/>
+            <field name="global_p" eval="True"/>
+        </record>
+        <record model="ir.rule" id="rule_account_line1">
+            <field name="domain"
+                eval="[('company', '=', Eval('user', {}).get('company', None))]"
+                pyson="1"/>
+            <field name="rule_group" ref="rule_group_account_line"/>
+        </record>
     </data>
 </tryton>
