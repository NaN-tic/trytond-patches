Index: trytond/trytond/modules/production/bom.py
===================================================================

--- a/trytond/trytond/modules/production/bom.py
+++ b/trytond/trytond/modules/production/bom.py
@@ -33,6 +33,8 @@
         Uom = Pool().get('product.uom')
         for output in self.outputs:
             if output.product == product:
+                if not output.quantity:
+                    return 0.0
                 quantity = Uom.compute_qty(uom, quantity,
                     output.uom, round=False)
                 return quantity / output.quantity
@@ -67,6 +69,7 @@
     unit_digits = fields.Function(fields.Integer('Unit Digits'),
         'on_change_with_unit_digits')
     quantity = fields.Float('Quantity', required=True,
+        domain=[('quantity', '>=', 0)],
         digits=(16, Eval('unit_digits', 2)),
         depends=['unit_digits'])


Index: trytond/trytond/modules/production/tests/scenario_production.rst
===================================================================

--- a/trytond/trytond/modules/production/tests/scenario_production.rst
+++ b/trytond/trytond/modules/production/tests/scenario_production.rst
@@ -217,3 +217,23 @@
     >>> output, = production.outputs
     >>> output.effective_date == yesterday
     True
+
+
+Make a production with a bom of zero quantity::
+
+    >>> zero_bom, = BOM.duplicate([bom])
+    >>> for input_ in bom.inputs:
+    ...     input_.quantity = 0.0
+    >>> bom_output, = bom.outputs
+    >>> bom_output.quantity = 0.0
+    >>> bom.save()
+    >>> production = Production()
+    >>> production.effective_date = yesterday
+    >>> production.product = product
+    >>> production.bom = bom
+    >>> production.quantity = 2
+    >>> [i.quantity for i in production.inputs]
+    [0.0, 0.0]
+    >>> output, = production.outputs
+    >>> output.quantity
+    0.0

