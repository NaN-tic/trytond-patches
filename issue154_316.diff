Index: nan40/trytond/trytond/modules/purchase/product.py
===================================================================
--- nan40.orig/trytond/trytond/modules/purchase/product.py	2016-08-25 08:42:15.677350593 +0200
+++ nan40/trytond/trytond/modules/purchase/product.py	2016-08-25 08:43:59.133348740 +0200
@@ -116,6 +116,7 @@
         ProductSupplier = pool.get('purchase.product_supplier')
         ProductSupplierPrice = pool.get('purchase.product_supplier.price')
 
+        print "dins de get_purchase_price"
         today = Date.today()
         context = Transaction().context
         prices = {}
@@ -141,11 +142,15 @@
             for product_supplier in product.product_suppliers:
                 if product_supplier.match(pattern):
                     pattern = ProductSupplierPrice.get_pattern()
-                    for price in product_supplier.prices:
-                        if price.match(quantity, uom, pattern):
-                            prices[product.id] = price.unit_price
-                            default_uom = product_supplier.uom
-                            default_currency = product_supplier.currency
+                    price = product.get_supplier_price(product_supplier,
+                        quantity, uom, pattern)
+                    print price
+                    if price is not None:
+                        prices[product.id] = price
+                        default_uom = product.purchase_uom
+                        default_currency = product_supplier.currency
+                    else:
+                        price = product.cost_price
                     break
             prices[product.id] = Uom.compute_price(
                 default_uom, prices[product.id], uom)
@@ -156,6 +161,14 @@
                         prices[product.id], currency, round=False)
         return prices
 
+    def get_supplier_price(self, product_supplier, quantity, uom, pattern):
+        print "dins get_supplier_price"
+        res = None
+        for price in product_supplier.prices:
+            if price.match(quantity, uom, pattern):
+                res = price.unit_price
+        return res
+
 
 class ProductSupplier(ModelSQL, ModelView, MatchMixin):
     'Product Supplier'
