diff --git a/tryton/modules/account_invoice/message.xml b/tryton/modules/account_invoice/message.xml
index e4bf74014d..4a7f54d622 100644
--- a/tryton/modules/account_invoice/message.xml
+++ b/tryton/modules/account_invoice/message.xml
@@ -9,6 +9,9 @@ this repository contains the full copyright notices and license terms. -->
         <record model="ir.message" id="msg_payment_term_missing_remainder">
             <field name="text">To compute terms, you must append a remainder line on payment term "%(payment_term)s".</field>
         </record>
+        <record model="ir.message" id="msg_payment_term_non_zero_ratio_divisor">
+            <field name="text">The ratio and divisor can not be both equal to zero.</field>
+        </record>
         <record model="ir.message" id="msg_payment_term_invalid_ratio_divisor">
             <field name="text">The ratio and divisor are not consistent on line "%(line)s".</field>
         </record>
diff --git a/tryton/modules/account_invoice/payment_term.py b/tryton/modules/account_invoice/payment_term.py
index faefc7910b..73c4bb607d 100644
--- a/tryton/modules/account_invoice/payment_term.py
+++ b/tryton/modules/account_invoice/payment_term.py
@@ -7,10 +7,10 @@ from dateutil.relativedelta import relativedelta
 from trytond import backend
 from trytond.i18n import gettext
 from trytond.model import (
-    DeactivableMixin, ModelSQL, ModelView, fields, sequence_ordered)
+    Check, DeactivableMixin, ModelSQL, ModelView, fields, sequence_ordered)
 from trytond.modules.currency.fields import Monetary
 from trytond.pool import Pool
-from trytond.pyson import Eval
+from trytond.pyson import Eval, If
 from trytond.transaction import Transaction
 from trytond.wizard import Button, StateView, Wizard

@@ -92,6 +92,12 @@ class PaymentTermLine(sequence_ordered(), ModelSQL, ModelView):
             ('remainder', 'Remainder'),
             ], 'Type', required=True)
     ratio = fields.Numeric('Ratio', digits=(14, 10),
+        domain=[
+            If(Eval('type').in_(['percent', 'percent_on_total'])
+                & ~Eval('divisor', 0),
+                ('ratio', '!=', 0),
+                ()),
+            ],
         states={
             'invisible': ~Eval('type').in_(['percent', 'percent_on_total']),
             'required': Eval('type').in_(['percent', 'percent_on_total']),
@@ -118,6 +124,14 @@ class PaymentTermLine(sequence_ordered(), ModelSQL, ModelView):
     @classmethod
     def __setup__(cls):
         super().__setup__()
+        t = cls.__table__()
+        cls._sql_constraints += [
+            ('non_zero_ratio_divisor',
+                Check(t,
+                    (t.ratio != 0) | (t.divisor != 0)
+                    | ~t.type.in_(['percent', 'percent_on_total'])),
+                'account_invoice.msg_payment_term_non_zero_ratio_divisor'),
+            ]
         cls.__access__.add('payment')

     @staticmethod
