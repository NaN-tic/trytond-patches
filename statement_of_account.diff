diff --git a/tryton/modules/account/account.py b/tryton/modules/account/account.py
index afc1e93b06..f72314f1e2 100644
--- a/tryton/modules/account/account.py
+++ b/tryton/modules/account/account.py
@@ -2205,13 +2205,6 @@ class GeneralLedgerAccountContext(ModelView):
         elif period_id is not None and period_id >= 0:
             period = Period(period_id)
             return period.fiscalyear.id
-        else:
-            try:
-                fiscalyear = FiscalYear.find(
-                    context.get('company'), test_state=False)
-            except FiscalYearNotFoundError:
-                return None
-            return fiscalyear.id

     @classmethod
     def default_start_period(cls):
@@ -2248,7 +2241,7 @@ class GeneralLedgerAccountContext(ModelView):
         if not self.company:
             self.fiscalyear = None
             self.on_change_fiscalyear()
-        elif not self.fiscalyear or self.fiscalyear.company != self.company:
+        elif self.fiscalyear and self.fiscalyear.company != self.company:
             try:
                 self.fiscalyear = FiscalYear.find(
                     self.company, test_state=False)
@@ -2679,7 +2672,7 @@ class IncomeStatementContext(ModelView):
     'Income Statement Context'
     __name__ = 'account.income_statement.context'
     fiscalyear = fields.Many2One('account.fiscalyear', 'Fiscal Year',
-        required=True,
+        required=False,
         domain=[
             ('company', '=', Eval('company')),
             ])
@@ -2689,7 +2682,8 @@ class IncomeStatementContext(ModelView):
             ('start_date', '<=', (Eval('end_period'), 'start_date'))
             ],
         states={
-            'invisible': Eval('from_date', False) | Eval('to_date', False),
+            'invisible': (Eval('from_date', False) | Eval('to_date', False)
+                | ~Eval('fiscalyear', False))
             })
     end_period = fields.Many2One('account.period', 'End Period',
         domain=[
@@ -2697,7 +2691,8 @@ class IncomeStatementContext(ModelView):
             ('start_date', '>=', (Eval('start_period'), 'start_date')),
             ],
         states={
-            'invisible': Eval('from_date', False) | Eval('to_date', False),
+            'invisible': (Eval('from_date', False) | Eval('to_date', False)
+                | ~Eval('fiscalyear', False))
             })
     from_date = fields.Date("From Date",
         domain=[
