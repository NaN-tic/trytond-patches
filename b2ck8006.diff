diff --git a/tryton/modules/analytic_sale/tryton.cfg b/tryton/modules/analytic_sale/tryton.cfg
index e8b90cf09e..3db12f7a89 100644
--- a/tryton/modules/analytic_sale/tryton.cfg
+++ b/tryton/modules/analytic_sale/tryton.cfg
@@ -9,5 +9,6 @@ xml:
 
 [register]
 model:
+    sale.Sale
     sale.Line
     sale.AnalyticAccountEntry
diff --git a/modules/analytic_sale/sale.py b/modules/analytic_sale/sale.py
index eba47b42e9..d36c2a5171 100644
--- a/tryton/modules/analytic_sale/sale.py
+++ b/tryton/modules/analytic_sale/sale.py
@@ -6,6 +6,33 @@ from trytond.pool import Pool, PoolMeta
 from trytond.pyson import Eval


+class Sale(metaclass=PoolMeta):
+    __name__ = 'sale.sale'
+
+    def create_invoice(self):
+        pool = Pool()
+        AnalyticAccountEntry = pool.get('analytic.account.entry')
+        SaleLine = pool.get('sale.line')
+
+        invoice = super().create_invoice()
+        if not invoice:
+            return
+        to_copy = []
+        for line in invoice.lines:
+            if not isinstance(line.origin, SaleLine):
+                continue
+            line.analytic_accounts = tuple()
+            for account in line.origin.analytic_accounts:
+                to_copy.append((line, account))
+        accounts = AnalyticAccountEntry.copy([x[1] for x in to_copy], default={
+                'origin': None,
+                })
+        for line, account in zip([x[0] for x in to_copy], accounts):
+            line.analytic_accounts += (account,)
+        invoice.lines = invoice.lines
+        return invoice
+
+
 class Line(AnalyticMixin, metaclass=PoolMeta):
     __name__ = 'sale.line'

@@ -20,19 +45,6 @@ class Line(AnalyticMixin, metaclass=PoolMeta):
             'readonly': Eval('sale_state') != 'draft',
             }

-    def get_invoice_line(self):
-        pool = Pool()
-        AnalyticAccountEntry = pool.get('analytic.account.entry')
-
-        invoice_lines = super().get_invoice_line()
-        for invoice_line in invoice_lines:
-            new_entries = AnalyticAccountEntry.copy(self.analytic_accounts,
-                default={
-                    'origin': None,
-                    })
-            invoice_line.analytic_accounts = new_entries
-        return invoice_lines
-

 class AnalyticAccountEntry(metaclass=PoolMeta):
     __name__ = 'analytic.account.entry'
diff --git a/tryton/modules/analytic_purchase/tryton.cfg b/tryton/modules/analytic_purchase/tryton.cfg
index c822b4f465..50f50ca4db 100644
--- a/tryton/modules/analytic_purchase/tryton.cfg
+++ b/tryton/modules/analytic_purchase/tryton.cfg
@@ -9,5 +9,6 @@ xml:
 
 [register]
 model:
+    purchase.Purchase
     purchase.PurchaseLine
     purchase.AnalyticAccountEntry
diff --git a/tryton/modules/analytic_purchase/purchase.py b/tryton/modules/analytic_purchase/purchase.py
index 9b5f6c17f5..20f69225ff 100644
--- a/tryton/modules/analytic_purchase/purchase.py
+++ b/tryton/modules/analytic_purchase/purchase.py
@@ -6,6 +6,33 @@ from trytond.pool import Pool, PoolMeta
 from trytond.pyson import Eval


+class Purchase(metaclass=PoolMeta):
+    __name__ = 'purchase.purchase'
+
+    def create_invoice(self):
+        pool = Pool()
+        AnalyticAccountEntry = pool.get('analytic.account.entry')
+        PurchaseLine = pool.get('purchase.line')
+
+        invoice = super().create_invoice()
+        if not invoice:
+            return
+        to_copy = []
+        for line in invoice.lines:
+            if not isinstance(line.origin, PurchaseLine):
+                continue
+            line.analytic_accounts = tuple()
+            for account in line.origin.analytic_accounts:
+                to_copy.append((line, account))
+        accounts = AnalyticAccountEntry.copy([x[1] for x in to_copy], default={
+                'origin': None,
+                })
+        for line, account in zip([x[0] for x in to_copy], accounts):
+            line.analytic_accounts += (account,)
+        invoice.lines = invoice.lines
+        return invoice
+
+
 class PurchaseLine(AnalyticMixin, metaclass=PoolMeta):
     __name__ = 'purchase.line'

@@ -20,19 +47,6 @@ class PurchaseLine(AnalyticMixin, metaclass=PoolMeta):
             'readonly': Eval('purchase_state') != 'draft',
             }

-    def get_invoice_line(self):
-        pool = Pool()
-        AnalyticAccountEntry = pool.get('analytic.account.entry')
-
-        invoice_lines = super().get_invoice_line()
-        for invoice_line in invoice_lines:
-            new_entries = AnalyticAccountEntry.copy(self.analytic_accounts,
-                default={
-                    'origin': None,
-                    })
-            invoice_line.analytic_accounts = new_entries
-        return invoice_lines
-

 class AnalyticAccountEntry(metaclass=PoolMeta):
     __name__ = 'analytic.account.entry'
