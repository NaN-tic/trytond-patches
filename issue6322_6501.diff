diff -r dcef1b340df0 trytond/modules/commission/commission.py
--- a/trytond/trytond/modules/commission/commission.py	Wed Jan 04 00:28:37 2017 +0100
+++ b/trytond/trytond/modules/commission/commission.py	Fri Nov 17 13:33:24 2017 +0100
@@ -143,7 +143,12 @@
         'Compute commission amount for the amount'
         if pattern is None:
             pattern = {}
-        pattern['product'] = product.id if product else None
+        if product:
+            pattern['categories'] = [c.id for c in product.categories]
+            pattern['product'] = product.id
+        else:
+            pattern['categories'] = []
+            pattern['product'] = None
         context = self.get_context_formula(amount, product)
         for line in self.lines:
             if line.match(pattern):
@@ -155,6 +160,8 @@
     __name__ = 'commission.plan.line'
     plan = fields.Many2One('commission.plan', 'Plan', required=True,
         ondelete='CASCADE')
+    category = fields.Many2One(
+        'product.category', "Category", ondelete='CASCADE')
     product = fields.Many2One('product.product', 'Product')
     sequence = fields.Integer('Sequence')
     formula = fields.Char('Formula', required=True,
@@ -204,6 +211,15 @@
         context.setdefault('functions', {})['Decimal'] = Decimal
         return simple_eval(decistmt(self.formula), **context)
 
+    def match(self, pattern):
+        if 'categories' in pattern:
+            pattern = pattern.copy()
+            categories = pattern.pop('categories')
+            if (self.category is not None
+                    and self.category.id not in categories):
+                return False
+        return super(PlanLines, self).match(pattern)
+
 
 class Commission(ModelSQL, ModelView):
     'Commission'
diff -r dcef1b340df0 trytond/trytond/modules/commission/tests/test_commission.py
--- a/trytond/trytond/modules/commission/tests/test_commission.py	Wed Jan 04 00:28:37 2017 +0100
+++ b/trytond/trytond/modules/commission/tests/test_commission.py	Fri Nov 17 13:33:24 2017 +0100
@@ -4,16 +4,116 @@
 
 import unittest
 import doctest
+from decimal import Decimal
 
-from trytond.tests.test_tryton import ModuleTestCase
+from trytond.tests.test_tryton import ModuleTestCase, with_transaction
 from trytond.tests.test_tryton import suite as test_suite
 from trytond.tests.test_tryton import doctest_setup, doctest_teardown
+from trytond.tests.test_tryton import doctest_checker
+from trytond.pool import Pool
+
+from trytond.modules.company.tests import create_company, set_company
+
+
+def create_product(name, list_price, cost_price, categories=None):
+    pool = Pool()
+    Template = pool.get('product.template')
+    Product = pool.get('product.product')
+    Uom = pool.get('product.uom')
+
+    unit, = Uom.search([('name', '=', 'Unit')])
+    template = Template(
+        name=name,
+        type='service',
+        list_price=list_price,
+        cost_price=cost_price,
+        default_uom=unit,
+        products=None,
+        )
+    if categories:
+        template.categories = categories
+    template.save()
+    product = Product(template=template)
+    product.save()
+    return product
+
+
+def create_plan(lines):
+    pool = Pool()
+    Plan = pool.get('commission.plan')
+
+    commission_product = create_product("Commission", Decimal(10),
+        Decimal(3), [])
+    plan, = Plan.create([{
+                'name': "Commission Plan",
+                'commission_product': commission_product.id,
+                'lines': [('create', lines)]
+
+                }])
+    return plan
 
 
 class CommissionTestCase(ModuleTestCase):
     'Test Commission module'
     module = 'commission'
 
+    @with_transaction()
+    def test_plan_category(self):
+        "Test plan with category"
+        pool = Pool()
+        Category = pool.get('product.category')
+
+        category = Category(name="Category")
+        category.save()
+
+        company = create_company()
+        with set_company(company):
+            product = create_product(
+                "Other", Decimal(10), Decimal(3), [category])
+            plan = create_plan([{
+                        'category': category.id,
+                        'formula': 'amount * 0.8',
+                        }, {
+                        'formula': 'amount',
+                        }])
+
+            self.assertEqual(plan.compute(Decimal(1), product), Decimal('0.8'))
+            template = product.template
+            template.categories = []
+            template.save()
+
+            self.assertEqual(plan.compute(Decimal(1), product), Decimal(1))
+
+    @with_transaction()
+    def test_plan_no_product(self):
+        "Test plan with no product"
+        pool = Pool()
+        Category = pool.get('product.category')
+        PlanLine = pool.get('commission.plan.line')
+
+        category = Category(name="Category")
+        category.save()
+
+        company = create_company()
+        with set_company(company):
+            product = create_product("Other", Decimal(10), Decimal(3))
+            plan = create_plan([{
+                        'category': category.id,
+                        'formula': 'amount * 0.8',
+                        }, {
+                        'product': product.id,
+                        'formula': 'amount * 0.7',
+                        }, {
+                        'formula': 'amount',
+                        }])
+
+            self.assertEqual(plan.compute(Decimal(1), None), Decimal(1))
+
+            PlanLine.delete(plan.lines[1:])
+
+            self.assertEqual(plan.compute(Decimal(1), None), None)
+
+
 
 def suite():
     suite = test_suite()
diff -r dcef1b340df0 trytond/trytond/modules/commission/view/plan_line_form.xml
--- a/trytond/trytond/modules/commission/view/plan_line_form.xml	Wed Jan 04 00:28:37 2017 +0100
+++ b/trytond/trytond/modules/commission/view/plan_line_form.xml	Fri Nov 17 13:33:24 2017 +0100
@@ -5,11 +5,12 @@
     <label name="plan"/>
     <field name="plan"/>
     <newline/>
-    <label name="product"/>
-    <field name="product"/>
     <label name="sequence"/>
     <field name="sequence"/>
-    <newline/>
+    <label name="category"/>
+    <field name="category"/>
+    <label name="product"/>
+    <field name="product"/>
     <label name="formula"/>
-    <field name="formula" colspan="3"/>
+    <field name="formula" colspan="4"/>
 </form>
diff -r dcef1b340df0 trytond/trytond/modules/commission/view/plan_line_list.xml
--- a/trytond/trytond/modules/commission/view/plan_line_list.xml	Wed Jan 04 00:28:37 2017 +0100
+++ b/trytond/trytond/modules/commission/view/plan_line_list.xml	Fri Nov 17 13:33:24 2017 +0100
@@ -4,6 +4,7 @@
 <tree string="Commission Plan Lines">
     <field name="plan"/>
     <field name="sequence"/>
+    <field name="category"/>
     <field name="product"/>
     <field name="formula"/>
 </tree>
diff -r dcef1b340df0 trytond/trytond/modules/commission/view/plan_line_list_sequence.xml
--- a/trytond/trytond/modules/commission/view/plan_line_list_sequence.xml	Wed Jan 04 00:28:37 2017 +0100
+++ b/trytond/trytond/modules/commission/view/plan_line_list_sequence.xml	Fri Nov 17 13:33:24 2017 +0100
@@ -2,6 +2,7 @@
 <!-- This file is part of Tryton.  The COPYRIGHT file at the top level of
 this repository contains the full copyright notices and license terms. -->
 <tree string="Commission Plan Lines" sequence="sequence">
+    <field name="category"/>
     <field name="product"/>
     <field name="formula"/>
 </tree>
