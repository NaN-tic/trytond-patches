diff -r 0a8be30b1285 stock.py
--- a/trytond/trytond/modules/stock_lot/stock.py	Wed Nov 13 16:08:41 2019 +0100
+++ b/trytond/trytond/modules/stock_lot/stock.py	Wed Nov 13 16:31:06 2019 +0100
@@ -186,31 +186,41 @@
         for shipment in shipments:
             outgoing_by_product = defaultdict(list)
             for move in shipment.outgoing_moves:
-                outgoing_by_product[move.product.id].append(move)
+                key = (move.product.id, move)
+                outgoing_by_product[key].append((move, Uom.compute_qty(move.uom,
+                    move.quantity, move.product.default_uom,
+                    round=False)))
             for move in shipment.inventory_moves:
                 if not move.lot:
                     continue
                 quantity = Uom.compute_qty(move.uom, move.quantity,
                     move.product.default_uom, round=False)
-                outgoing_moves = outgoing_by_product[move.product.id]
+                key = (move.product.id, move.origin)
+                outgoing_moves = outgoing_by_product[key]
                 while outgoing_moves and quantity > 0:
-                    out_move = outgoing_moves.pop()
-                    out_quantity = Uom.compute_qty(out_move.uom,
-                        out_move.quantity, out_move.product.default_uom,
-                        round=False)
+                    out_move, out_quantity = outgoing_moves.pop()
                     values = {}
+                    pending_qty = out_quantity
                     if quantity < out_quantity:
                         with Transaction().set_context(_stock_move_split=True):
-                            outgoing_moves.extend(
-                                Move.copy([out_move], default={
-                                        'quantity': out_move.uom.round(
-                                            out_quantity - quantity),
-                                        }))
-                        values['quantity'] = out_move.uom.round(quantity)
-                    values['lot'] = move.lot.id
-                    to_write.extend(([out_move], values))
+                            new_move, = Move.copy([out_move], default={
+                                        'quantity': quantity,
+                                        'lot': move.lot.id
+                                        })
+                            to_write.extend(([move], {'origin': str(new_move)}))
+                            pending_qty = out_move.uom.round(
+                                out_quantity - quantity)
+                            out_quantity = quantity
+                    else:
+                        pending_qty = 0
+                        to_write.extend( ([out_move], {'lot': move.lot}) )
+                    outgoing_by_product[key].append((out_move, pending_qty))
                     quantity -= out_quantity
                 assert move.uom.round(quantity) <= 0
+        for values in outgoing_by_product.values():
+            for move, qty in values:
+                if qty > 0:
+                    to_write.extend(([move], {'quantity': qty}))
         if to_write:
             Move.write(*to_write)
