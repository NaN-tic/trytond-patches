diff -r 7b51272de70f trytond/trytond/modules/account_payment_type/invoice.py
--- a/trytond/trytond/modules/account_payment_type/invoice.py	Wed Jun 14 16:26:49 2017 +0200
+++ b/trytond/trytond/modules/account_payment_type/invoice.py	Wed Jun 14 16:30:45 2017 +0200
@@ -23,7 +23,7 @@
         'on_change_with_payment_type_kind')
     payment_type = fields.Many2One('account.payment.type', 'Payment Type',
         domain=[
-            ('kind', 'in', ['both', Eval('payment_type_kind')]),
+            ('kind', '=', Eval('payment_type_kind')),
             ],
         states={
             'readonly': Not(Bool(Eval('state').in_(['draft', 'validated']))),
diff -r 7b51272de70f trytond/trytond/modules/account_payment_type/party.py
--- a/trytond/trytond/modules/account_payment_type/party.py	Wed Jun 14 16:26:49 2017 +0200
+++ b/trytond/trytond/modules/account_payment_type/party.py	Wed Jun 14 16:30:45 2017 +0200
@@ -27,14 +27,14 @@

     customer_payment_type = fields.Function(fields.Many2One(
             'account.payment.type', 'Customer Payment type', domain=[
-                ('kind', 'in', ['both', 'receivable']),
+                ('kind', '=', 'receivable'),
                 ],
             help='Payment type of the customer.'),
         'get_payment_type', setter='set_payment_type',
         searcher='search_payment_type')
     supplier_payment_type = fields.Function(fields.Many2One(
             'account.payment.type', string='Supplier Payment type', domain=[
-                ('kind', 'in', ['both', 'payable']),
+                ('kind', '=', 'payable'),
                 ],
             help='Payment type of the supplier.'),
         'get_payment_type', setter='set_payment_type',
diff -r 7b51272de70f trytond/trytond/modules/account_payment_type/payment_type.py
--- a/trytond/trytond/modules/account_payment_type/payment_type.py	Wed Jun 14 16:26:49 2017 +0200
+++ b/trytond/trytond/modules/account_payment_type/payment_type.py	Wed Jun 14 16:30:45 2017 +0200
@@ -9,7 +9,6 @@
 __all__ = ['PaymentType']

 KINDS = [
-    ('both', 'Both'),
     ('payable', 'Payable'),
     ('receivable', 'Receivable'),
     ]
@@ -57,7 +56,7 @@

     @classmethod
     def default_kind(cls):
-        return 'both'
+        return 'payable'

     def get_rec_name(self, name):
         if self.code:
diff -r 7b51272de70f trytond/trytond/modules/account_payment_type/tests/scenario_account_payment_type.rst
--- a/trytond/trytond/modules/account_payment_type/tests/scenario_account_payment_type.rst	Wed Jun 14 16:26:49 2017 +0200
+++ b/trytond/trytond/modules/account_payment_type/tests/scenario_account_payment_type.rst	Wed Jun 14 16:30:45 2017 +0200
@@ -190,36 +190,3 @@
     False
     >>> invoice.untaxed_amount
     Decimal('0.00')
-
-Create both payment type::
-
-    >>> both = PaymentType(name='Both', kind='both')
-    >>> both.save()
-
-We can use both in negative and positive invoices::
-
-    >>> invoice = Invoice()
-    >>> invoice.party = party
-    >>> invoice.payment_term = payment_term
-    >>> line = invoice.lines.new()
-    >>> line.product = product
-    >>> line.quantity = 1
-    >>> line.unit_price = Decimal('50.0')
-    >>> invoice.payment_type = both
-    >>> invoice.untaxed_amount
-    Decimal('50.00')
-    >>> invoice.save()
-
-    >>> invoice.payment_type == both
-    True
-    >>> invoice = Invoice()
-    >>> invoice.party = party
-    >>> invoice.payment_term = payment_term
-    >>> line = invoice.lines.new()
-    >>> line.product = product
-    >>> line.quantity = -1
-    >>> line.unit_price = Decimal('40.0')
-    >>> invoice.payment_type = both
-    >>> invoice.save()
-    >>> invoice.payment_type == both
-    True
