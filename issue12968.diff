diff --git a/tryton/modules/stock/message.xml b/tryton/modules/stock/message.xml
index dcae4e4632..2d061803da 100644
--- a/tryton/modules/stock/message.xml
+++ b/tryton/modules/stock/message.xml
@@ -13,6 +13,9 @@ this repository contains the full copyright notices and license terms. -->
             <field name="text">You cannot change the cost price of a product which is associated with stock moves.
 You must use the "Modify Cost Price" wizard.</field>
         </record>
+        <record model="ir.message" id="msg_product_quantities_max">
+            <field name="text">You cannot select more than %(max)s products to compute quantities.</field>
+        </record>
         <record model="ir.message" id="msg_invalid_cost_price">
             <field name="text">Invalid cost price "%(cost_price)s" for product "%(product)s" with exception "%(exception)s".</field>
         </record>
diff --git a/tryton/modules/stock/product.py b/tryton/modules/stock/product.py
index 7e53384a3c..100057b890 100644
--- a/tryton/modules/stock/product.py
+++ b/tryton/modules/stock/product.py
@@ -7,7 +7,7 @@ from copy import deepcopy
 from decimal import Decimal

 from simpleeval import InvalidExpression, simple_eval
-from sql import Literal, Select, Window, With
+from sql import Literal, Null, Select, Window, With
 from sql.aggregate import Max, Sum
 from sql.conditionals import Case, Coalesce
 from sql.functions import CurrentTimestamp
@@ -19,7 +19,7 @@ from trytond.model.exceptions import AccessError
 from trytond.modules.product import price_digits, round_price
 from trytond.pool import Pool, PoolMeta
 from trytond.pyson import Bool, Eval, If, PYSONEncoder
-from trytond.tools import decistmt, grouped_slice
+from trytond.tools import decistmt, grouped_slice, reduce_ids
 from trytond.transaction import Transaction
 from trytond.wizard import (
     Button, StateAction, StateTransition, StateView, Wizard)
@@ -615,7 +615,8 @@ class ProductQuantitiesByWarehouse(ModelSQL, ModelView):
         Product = pool.get('product.product')
         Date = pool.get('ir.date')
         move = from_ = Move.__table__()
-        context = Transaction().context
+        transaction = Transaction()
+        context = transaction.context
         today = Date.today()

         if context.get('product_template') is not None:
@@ -624,7 +625,14 @@ class ProductQuantitiesByWarehouse(ModelSQL, ModelView):
                 product_template = [product_template]
             product = Product.__table__()
             from_ = move.join(product, condition=move.product == product.id)
-            product_clause = product.template.in_(product_template or [-1])
+            if product_template:
+                if len(product_template) > transaction.database.IN_MAX:
+                    raise AccessError(gettext(
+                            'stock.msg_product_quantities_max',
+                            max=transaction.database.IN_MAX))
+                product_clause = reduce_ids(product.template, product_template)
+            else:
+                product_clause = product.template == Null
             product_column = Concat('product.template,', product.template)
             products = [('product.template', i) for i in product_template]
         else:
@@ -633,7 +641,14 @@ class ProductQuantitiesByWarehouse(ModelSQL, ModelView):
                 product = []
             if isinstance(product, int):
                 product = [product]
-            product_clause = move.product.in_(product or [-1])
+            if product:
+                if len(product) > transaction.database.IN_MAX:
+                    raise AccessError(gettext(
+                            'stock.msg_product_quantities_max',
+                            max=transaction.database.IN_MAX))
+                product_clause = reduce_ids(move.product, product)
+            else:
+                product_clause = move.product == Null
             product_column = Concat('product.product,', move.product)
             products = [('product.product', i) for i in product]

@@ -877,7 +892,14 @@ class ProductQuantitiesByWarehouseMove(ModelSQL, ModelView):
                 product_template = [product_template]
             product = Product.__table__()
             from_ = move.join(product, condition=move.product == product.id)
-            product_clause = product.template.in_(product_template or [-1])
+            if product_template:
+                if len(product_template) > transaction.database.IN_MAX:
+                    raise AccessError(gettext(
+                            'stock.msg_product_quantities_max',
+                            max=transaction.database.IN_MAX))
+                product_clause = reduce_ids(product.template, product_template)
+            else:
+                product_clause = product.template == Null
             product_column = Concat('product.template,', product.template)
         else:
             product = context.get('product', -1)
@@ -885,7 +907,14 @@ class ProductQuantitiesByWarehouseMove(ModelSQL, ModelView):
                 product = -1
             if isinstance(product, int):
                 product = [product]
-            product_clause = move.product.in_(product or [-1])
+            if product:
+                if len(product) > transaction.database.IN_MAX:
+                    raise AccessError(gettext(
+                            'stock.msg_product_quantities_max',
+                            max=transaction.database.IN_MAX))
+                product_clause = reduce_ids(move.product, product)
+            else:
+                product_clause = move.product == Null
             product_column = Concat('product.product,', move.product)

         if 'warehouse' in context:
